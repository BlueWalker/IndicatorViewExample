package example.walker.blue.indicator;

import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

import walker.blue.core.lib.indicator.IndicatorView;

/**
 * Main activity of the application. 
 */
public class MainActivity extends ActionBarActivity {

    /**
     * Padding being applied to the indicator
     */
    private static final int PADDING = 200;

    /**
     * The acitvities instance of the indicatorView
     */
    private IndicatorView indicatorView;
    /**
     * Executor service used to execute our runnable
     */
    private ScheduledExecutorService executorService;
    /**
     * Future of the runnable in charge of moving the indicator
     */
    private ScheduledFuture<?> future;

    /**
     * Runnable in charge of upating the indicator
     */
    private final Runnable runnable = new Runnable() {

        private static final int INCREMENT = 1;
        private static final float MAX = 55.0f;

        private int direction = 1;
        private float currentAngle = 0;

        @Override
        public void run() {
            if (Math.abs(this.currentAngle) == MAX)  {
                direction *= -1;
            }
            this.currentAngle += direction * INCREMENT;
            indicatorView.drawIndicatorAtAngle(this.currentAngle);
        }
    };

    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        this.indicatorView = new IndicatorView(this);
        this.setContentView(indicatorView);
    }

    @Override
    protected void onPause() {
        super.onPause();
        this.future.cancel(true);
    }

    @Override
    protected void onResume() {
        super.onResume();
        this.future = this.startScheduler();
    }

    /**
     * Start the scheduler that executes the runnable and updates the indicator
     *
     * @return the future generated by starting the scheduler
     */
    private ScheduledFuture<?> startScheduler() {
        if (this.executorService == null) {
            this.executorService = Executors.newSingleThreadScheduledExecutor();
        }
        return this.executorService.scheduleAtFixedRate(runnable, 0, 1, TimeUnit.MILLISECONDS);
    }
}